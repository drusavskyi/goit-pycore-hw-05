from typing import Callable, Dict


def caching_fibonacci() -> Callable[[int], int]:
    """
    Повертає функцію fibonacci(n), яка обчислює n-те число Фібоначчі
    з кешуванням (мемоізацією).

    ▸ У замиканні створюється словник `cache`, де зберігаються
      раніше обчислені значення, – це пришвидшує наступні виклики.

    Повертає
    --------
    Callable[[int], int]
        Функцію, що приймає невід’ємне ціле n та повертає n-те число Фібоначчі.
    """
    cache: Dict[int, int] = {}  # кеш «живе» між викликами fibonacci

    def fibonacci(n: int) -> int:
        """
        Рекурсивно обчислює n-те число Фібоначчі з мемоізацією.

        Параметри
        ---------
        n : int
            Невід’ємне ціле число.

        Повертає
        --------
        int
            n-те число Фібоначчі.

        Викидає
        -------
        ValueError
            Якщо n від’ємне або неціле.
        """
        # Валідація вхідних даних
        if not isinstance(n, int) or n < 0:
            raise ValueError("n має бути цілим невід’ємним числом")

        # Базові випадки
        if n in (0, 1):
            return n

        # Спроба взяти готове значення з кешу
        if n in cache:
            return cache[n]

        # Рекурсивне обчислення + збереження у кеші
        cache[n] = fibonacci(n - 1) + fibonacci(n - 2)
        return cache[n]

    return fibonacci